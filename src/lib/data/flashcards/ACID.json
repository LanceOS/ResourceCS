[
	{
		"question": "What is Atomicity? (ACID)",
		"answer": "Atomicity is the 'all-or-nothing' rule for database transactions. A transaction is treated as a single, indivisible unit of work. If any part of the transaction fails, the entire transaction is aborted, and the database is rolled back to its state before the transaction began. This prevents partial updates and ensures data integrity. A classic example is a bank transfer: if money is debited from one account but fails to be credited to the other, the entire transaction is rolled back, and the debit is undone.",
		"sources": [
			{
				"name": "IBM: What is ACID compliance?",
				"source": "https://www.ibm.com/topics/acid-compliance"
			},
			{
				"name": "Oracle: Transaction Concepts",
				"source": "https://docs.oracle.com/database/121/ADXDB/concepts.htm#ADXDB4595"
			}
		],
		"additional_topics": [
			{
				"topic": "ACID compliance",
				"name": "IBM: What is ACID compliance?",
				"source": "https://www.ibm.com/topics/acid-compliance"
			},
			{
				"topic": "Database transactions",
				"name": "Microsoft Docs: Transactions",
				"source": "https://learn.microsoft.com/en-us/sql/relational-databases/transactions/transactions?view=sql-server-ver16"
			},
			{
				"topic": "Rollback and Commit",
				"name": "BMC: Rollback and Commit",
				"source": "https://www.bmc.com/blogs/rollback-commit/"
			}
		]
	},
	{
		"question": "What is Consistency? (ACID)",
		"answer": "Consistency ensures that a transaction can only bring the database from one valid state to another. It guarantees that any data written to the database must conform to all predefined rules, constraints, and cascades. If a transaction attempts to violate one of these rules (e.g., a foreign key constraint or a check constraint that prevents a balance from going negative), the transaction is rolled back. This property is crucial for maintaining the logical integrity of the data.",
		"sources": [
			{
				"name": "Yugabyte: ACID Properties",
				"source": "https://www.yugabyte.com/key-concepts/acid-properties/"
			},
			{
				"name": "BMC: The ACID Properties of Database Transactions",
				"source": "https://www.bmc.com/blogs/acid-atomic-consistent-isolated-durable/"
			}
		],
		"additional_topics": [
			{
				"topic": "ACID compliance",
				"name": "IBM: What is ACID compliance?",
				"source": "https://www.ibm.com/topics/acid-compliance"
			},
			{
				"topic": "Database integrity constraints",
				"name": "Oracle: Constraints",
				"source": "https://docs.oracle.com/cd/E11882_01/server.112/e41084/cons_ref001.htm"
			},
			{
				"topic": "ACID vs. CAP Consistency",
				"name": "BMC: ACID vs. CAP Theorems",
				"source": "https://www.bmc.com/blogs/acid-vs-cap-theorems/"
			}
		]
	},
	{
		"question": "What is Isolation? (ACID)",
		"answer": "Isolation guarantees that concurrent transactions do not interfere with one another. To the user, it appears as if each transaction is running in a serial fashion, even if they are executed at the same time. This prevents issues like dirty reads (reading uncommitted data), non-repeatable reads (reading different data in the same transaction), and phantom reads (new rows appearing in the same transaction). Databases offer different isolation levels (e.g., serializable, repeatable read) to balance performance and the degree of isolation.",
		"sources": [
			{
				"name": "IBM: Isolation levels",
				"source": "https://www.ibm.com/topics/isolation-levels"
			},
			{
				"name": "Microsoft Docs: Transaction locking and row versioning guide",
				"source": "https://learn.microsoft.com/en-us/sql/relational-databases/sql-server-transaction-locking-and-row-versioning-guide"
			}
		],
		"additional_topics": [
			{
				"topic": "ACID compliance",
				"name": "IBM: What is ACID compliance?",
				"source": "https://www.ibm.com/topics/acid-compliance"
			},
			{
				"topic": "Concurrency control",
				"name": "Ohio State University: Concurrency Control",
				"source": "https://u.osu.edu/cst/2018/10/25/concurrency-control/"
			},
			{
				"topic": "Isolation levels",
				"name": "Microsoft Docs: Transaction locking and row versioning guide",
				"source": "https://learn.microsoft.com/en-us/sql/relational-databases/sql-server-transaction-locking-and-row-versioning-guide"
			}
		]
	},
	{
		"question": "What is Durability? (ACID)",
		"answer": "Durability guarantees that once a transaction has been successfully committed, its changes are permanent. The data will survive any subsequent system failures, such as power outages, crashes, or server restarts. This is typically achieved by writing transaction logs to non-volatile storage (like a hard drive or SSD) before the transaction is officially considered 'committed.'",
		"sources": [
			{
				"name": "IBM: What is ACID compliance?",
				"source": "https://www.ibm.com/topics/acid-compliance"
			},
			{
				"name": "Oracle: Database White Paper on Durability",
				"source": "https://www.oracle.com/a/tech/docs/oracle-database-white-paper-durability.pdf"
			}
		],
		"additional_topics": [
			{
				"topic": "ACID compliance",
				"name": "IBM: What is ACID compliance?",
				"source": "https://www.ibm.com/topics/acid-compliance"
			},
			{
				"topic": "Database recovery",
				"name": "Oracle: Database Backup and Recovery User's Guide",
				"source": "https://docs.oracle.com/cd/E11882_01/server.112/e40540/recovery.htm"
			},
			{
				"topic": "Transaction logging",
				"name": "ScyllaDB: What is a Commitlog?",
				"source": "https://www.scylladb.com/glossary/commitlog/"
			}
		]
	},
	{
		"question": "What is Consistency? (CAP)",
		"answer": "In the context of the CAP theorem, Consistency means that all nodes in a distributed system have the same, up-to-date copy of the data at the same time. After a write operation is completed, any subsequent read operation, regardless of which node it hits, must return the value of that most recent write. This is a very strong form of consistency, often referred to as linearizability, and is distinct from the logical data integrity of ACID consistency.",
		"sources": [
			{
				"name": "Google Cloud Blog: Inside Cloud Spanner and the CAP Theorem",
				"source": "https://cloud.google.com/blog/products/databases/inside-cloud-spanner-and-the-cap-theorem"
			},
			{
				"name": "Dremio: Network Partition",
				"source": "https://www.dremio.com/wiki/network-partition/"
			}
		],
		"additional_topics": [
			{
				"topic": "CAP theorem",
				"name": "IBM: What is the CAP theorem?",
				"source": "https://www.ibm.com/cloud/learn/cap-theorem"
			},
			{
				"topic": "Distributed systems",
				"name": "ScienceDirect: Distributed System",
				"source": "https://www.sciencedirect.com/topics/computer-science/distributed-system"
			},
			{
				"topic": "ACID vs. CAP Consistency",
				"name": "BMC: ACID vs. CAP Theorems",
				"source": "https://www.bmc.com/blogs/acid-vs-cap-theorems/"
			}
		]
	},
	{
		"question": "What is Availability? (CAP)",
		"answer": "Availability is the guarantee that every request to a non-failing node will receive a response. The system must always be able to process requests and provide a result, without erroring out or timing out. This ensures that the service remains operational and accessible to clients, even if some nodes are down or a network partition exists. The trade-off is that in a partitioned state, the response might contain stale data.",
		"sources": [
			{
				"name": "Google Cloud Blog: Inside Cloud Spanner and the CAP Theorem",
				"source": "https://cloud.google.com/blog/products/databases/inside-cloud-spanner-and-the-cap-theorem"
			},
			{
				"name": "BMC: CAP Theorem",
				"source": "https://www.bmc.com/blogs/cap-theorem/"
			}
		],
		"additional_topics": [
			{
				"topic": "CAP theorem",
				"name": "IBM: What is the CAP theorem?",
				"source": "https://www.ibm.com/cloud/learn/cap-theorem"
			},
			{
				"topic": "Distributed systems",
				"name": "ScienceDirect: Distributed System",
				"source": "https://www.sciencedirect.com/topics/computer-science/distributed-system"
			},
			{
				"topic": "Eventual Consistency",
				"name": "Microsoft Azure: Eventual Consistency pattern",
				"source": "https://learn.microsoft.com/en-us/azure/architecture/patterns/eventual-consistency"
			}
		]
	},
	{
		"question": "What is Partition Tolerance? (CAP)",
		"answer": "Partition Tolerance is the ability of a distributed system to continue operating correctly even if there are network failures that prevent communication between some of the nodes. Since network partitions are an inevitable reality in any distributed system, this property is considered a prerequisite. The CAP theorem's central insight is that once you accept Partition Tolerance, you must choose between either Consistency or Availability during a partition.",
		"sources": [
			{
				"name": "Microsoft Azure: Data partitioning strategies",
				"source": "https://learn.microsoft.com/en-us/azure/architecture/best-practices/data-partitioning-strategies"
			},
			{
				"name": "IBM: What is the CAP theorem?",
				"source": "https://www.ibm.com/cloud/learn/cap-theorem"
			}
		],
		"additional_topics": [
			{
				"topic": "CAP theorem",
				"name": "IBM: What is the CAP theorem?",
				"source": "https://www.ibm.com/cloud/learn/cap-theorem"
			},
			{
				"topic": "Distributed systems",
				"name": "ScienceDirect: Distributed System",
				"source": "https://www.sciencedirect.com/topics/computer-science/distributed-system"
			},
			{
				"topic": "Network partition",
				"name": "Dremio: Network Partition",
				"source": "https://www.dremio.com/wiki/network-partition/"
			}
		]
	},
	{
		"question": "What is the P/A/C part of the PACELC theorem?",
		"answer": "The P/A/C part of PACELC is a restatement of the CAP theorem. It addresses the system's behavior when a network Partition occurs. In this scenario, the system must choose between guaranteeing Availability (continuing to process requests but potentially serving stale data) or guaranteeing Consistency (blocking requests to ensure all data is synchronized, making the system temporarily unavailable).",
		"sources": [
			{
				"name": "University of Waterloo: Proving PACELC",
				"source": "https://uwaterloo.ca/distributed-algorithms-systems-lab/sites/default/files/uploads/files/proving_pacelc.pdf"
			},
			{
				"name": "ScyllaDB: What is the PACELC Theorem?",
				"source": "https://www.scylladb.com/glossary/pacelc-theorem/"
			}
		],
		"additional_topics": [
			{
				"topic": "PACELC theorem",
				"name": "ScyllaDB: What is the PACELC Theorem?",
				"source": "https://www.scylladb.com/glossary/pacelc-theorem/"
			},
			{
				"topic": "CAP theorem",
				"name": "IBM: What is the CAP theorem?",
				"source": "https://www.ibm.com/cloud/learn/cap-theorem"
			},
			{
				"topic": "Distributed systems",
				"name": "ScienceDirect: Distributed System",
				"source": "https://www.sciencedirect.com/topics/computer-science/distributed-system"
			}
		]
	},
	{
		"question": "What is the E/L/C part of the PACELC theorem?",
		"answer": "The E/L/C part of PACELC addresses the system's behavior when there is no network partition ('Else' condition). In this scenario, the system must make a choice between prioritizing low Latency (responding quickly with the data it has) or strong Consistency (waiting for data to be fully replicated across all nodes before responding). For example, a system could respond instantly with slightly stale data to reduce latency, or it could wait for full synchronization to guarantee consistency, increasing latency.",
		"sources": [
			{
				"name": "University of Waterloo: Proving PACELC",
				"source": "https://uwaterloo.ca/distributed-algorithms-systems-lab/sites/default/files/uploads/files/proving_pacelc.pdf"
			},
			{
				"name": "ScyllaDB: What is the PACELC Theorem?",
				"source": "https://www.scylladb.com/glossary/pacelc-theorem/"
			}
		],
		"additional_topics": [
			{
				"topic": "PACELC theorem",
				"name": "ScyllaDB: What is the PACELC Theorem?",
				"source": "https://www.scylladb.com/glossary/pacelc-theorem/"
			},
			{
				"topic": "Consistency vs. Latency",
				"name": "InfoQ: A Discussion of PACELC",
				"source": "https://www.infoq.com/articles/pacelc-cap-theorem/"
			},
			{
				"topic": "Distributed systems",
				"name": "ScienceDirect: Distributed System",
				"source": "https://www.sciencedirect.com/topics/computer-science/distributed-system"
			}
		]
	}
]
