[
  {
    "question": "What is a function?",
    "answer": "A function is a block of organized, reusable code that performs a single, related action. It can accept inputs (parameters), perform a task, and optionally return a value.",
    "sources": [
      {
        "name": "Python Functions",
        "source": "https://docs.python.org/3/tutorial/controlflow.html#defining-functions"
      },
      {
        "name": "Functions in JavaScript",
        "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions"
      }
    ],
    "additional_topics": [
      {
        "topic": "Function Scope",
        "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_scopes_and_closures"
      },
      {
        "topic": "Pure Functions",
        "source": "https://www.ibm.com/docs/en/ads/24.0.1?topic=annotations-pure-functions"
      }
    ]
  },
  {
    "question": "What is a method?",
    "answer": "A method is a function that is associated with an object or a class. It represents a behavior or action that an object can perform and has access to the object's internal data (properties).",
    "sources": [
      {
        "name": "Methods in Python",
        "source": "https://docs.python.org/3/tutorial/classes.html#a-first-look-at-classes"
      },
      {
        "name": "OOP in JavaScript",
        "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#object_methods"
      }
    ],
    "additional_topics": [
      {
        "topic": "The 'self' or 'this' keyword",
        "source": "https://www.geeksforgeeks.org/php/what-is-the-difference-between-self-and-this/"
      },
      {
        "topic": "Class Methods vs. Instance Methods",
        "source": "https://realpython.com/instance-class-and-static-methods-demystified/"
      }
    ]
  },
  {
    "question": "What is a variable?",
    "answer": "A variable is a named storage location in memory that holds a value. The value stored in a variable can be changed during the execution of a program.",
    "sources": [
      {
        "name": "Variables in JavaScript",
        "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#variables"
      },
      {
        "name": "Python Variables",
        "source": "https://docs.python.org/3/tutorial/introduction.html#first-steps-towards-programming"
      }
    ],
    "additional_topics": [
      {
        "topic": "Variable Scope",
        "source": "https://www.freecodecamp.org/news/javascript-scope-tutorial-global-local-and-block-scope-with-var-let-and-const/"
      },
      {
        "topic": "Data Types",
        "source": "https://www.w3schools.com/js/js_datatypes.asp"
      }
    ]
  },
  {
    "question": "What is a parameter vs. an argument?",
    "answer": "A parameter is a variable defined in a function's declaration, acting as a placeholder. An argument is the actual value passed to the function when it is called.",
    "sources": [
      {
        "name": "MDN Web Docs on Parameters and Arguments",
        "source": "https://developer.mozilla.org/en-US/docs/Glossary/Parameter"
      },
      {
        "name": "Java Documentation on Arguments and Parameters",
        "source": "https://docs.oracle.com/javase/tutorial/java/javaOO/arguments.html"
      }
    ],
    "additional_topics": [
      {
        "topic": "Rest Parameters",
        "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters"
      },
      {
        "topic": "Default Parameters",
        "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters"
      }
    ]
  },
  {
    "question": "What is a class?",
    "answer": "A class is a blueprint or a template for creating objects. It defines the structure (attributes/properties) and behavior (methods) that all objects of that class will have.",
    "sources": [
      {
        "name": "Introduction to Classes in Python",
        "source": "https://docs.python.org/3/tutorial/classes.html"
      },
      {
        "name": "Classes in JavaScript",
        "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"
      }
    ],
    "additional_topics": [
      {
        "topic": "Constructors",
        "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor"
      },
      {
        "topic": "Static Methods",
        "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static"
      }
    ]
  },
  {
    "question": "What is an object?",
    "answer": "An object is an instance of a class. It is a self-contained unit that bundles together data (attributes) and behavior (methods) into a single entity.",
    "sources": [
      {
        "name": "OOP with objects in IBM Documentation",
        "source": "https://www.ibm.com/topics/object-oriented-programming"
      },
      {
        "name": "Objects in Java",
        "source": "https://www.geeksforgeeks.org/object-in-java/"
      }
    ],
    "additional_topics": [
      {
        "topic": "Object Prototype",
        "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"
      },
      {
        "topic": "Encapsulation",
        "source": "https://www.sumologic.com/glossary/encapsulation"
      }
    ]
  },
  {
    "question": "What is an array?",
    "answer": "An array is a data structure used to store a collection of elements. It stores elements in a contiguous memory block and allows access via a numerical index. While in some languages arrays are fixed in size and only hold elements of the same data type, other languages use dynamic arrays (or lists) that can change size and hold different data types.",
    "sources": [
      {
        "name": "Arrays in JavaScript",
        "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"
      },
      {
        "name": "Arrays in C++",
        "source": "https://www.geeksforgeeks.org/arrays-in-c/"
      }
    ],
    "additional_topics": [
      {
        "topic": "Array vs. List",
        "source": "https://discuss.codecademy.com/t/what-are-some-differences-between-an-array-and-a-list/351552"
      },
      {
        "topic": "Time Complexity of Array Operations",
        "source": "https://www.freecodecamp.org/news/data-structures-101-linked-lists-arrays-and-more-a7d18721469e/"
      }
    ]
  },
  {
    "question": "What is object destructuring?",
    "answer": "Object destructuring is a syntax that allows you to unpack properties from an object into distinct variables. It provides a more concise way to extract and assign values from objects.",
    "sources": [
      {
        "name": "Destructuring assignment in MDN Web Docs",
        "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#object_destructuring"
      },
      {
        "name": "FreeCodeCamp article on Destructuring",
        "source": "https://www.freecodecamp.org/news/how-to-use-object-destructuring-in-javascript/"
      }
    ],
    "additional_topics": [
      {
        "topic": "Array Destructuring",
        "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#array_destructuring"
      },
      {
        "topic": "Rest Parameters",
        "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters"
      }
    ]
  },
  {
    "question": "What is Encapsulation?",
    "answer": "Encapsulation is an OOP principle that bundles an object's data (attributes) and methods together, hiding the internal implementation details from the outside world. It helps protect data integrity.",
    "sources": [
      {
        "name": "Encapsulation in Java",
        "source": "https://www.geeksforgeeks.org/encapsulation-in-java/"
      },
      {
        "name": "IBM Documentation on OOP Principles",
        "source": "https://www.ibm.com/topics/object-oriented-programming"
      }
    ],
    "additional_topics": [
      {
        "topic": "Access Modifiers (public, private, protected)",
        "source": "https://www.geeksforgeeks.org/java/access-modifiers-java/"
      },
      {
        "topic": "Getters and Setters",
        "source": "https://dzone.com/articles/java-getter-and-setter-basics-common-mistakes-and"
      }
    ]
  },
  {
    "question": "What is Inheritance?",
    "answer": "Inheritance is an OOP principle where a new class (subclass or child class) inherits properties and methods from an existing class (superclass or parent class). It promotes code reuse and creates a hierarchy.",
    "sources": [
      {
        "name": "Inheritance in Python",
        "source": "https://docs.python.org/3/tutorial/classes.html#inheritance"
      },
      {
        "name": "Inheritance in Java",
        "source": "https://www.w3schools.com/java/java_inheritance.asp"
      }
    ],
    "additional_topics": [
      {
        "topic": "Method Overriding",
        "source": "https://docs.oracle.com/javase/8/docs/api/java/lang/Override.html"
      },
      {
        "topic": "Polymorphism",
        "source": "https://www.ibm.com/topics/object-oriented-programming"
      }
    ]
  },
  {
    "question": "What is Polymorphism?",
    "answer": "Polymorphism is an OOP principle that allows a single method to behave differently depending on the object it is called on. It means 'many forms' and is often achieved through method overriding.",
    "sources": [
      {
        "name": "Polymorphism in Java",
        "source": "https://www.geeksforgeeks.org/polymorphism-in-java/"
      },
      {
        "name": "A guide to Polymorphism in JavaScript",
        "source": "https://www.freecodecamp.org/news/polymorphism-in-javascript/"
      }
    ],
    "additional_topics": [
      {
        "topic": "Method Overloading vs. Overriding",
        "source": "https://www.index.dev/blog/overloading-vs-overriding-java"
      },
      {
        "topic": "Abstract Classes and Interfaces",
        "source": "https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html"
      }
    ]
  },
  {
    "question": "What are the four main principles of Object-Oriented Programming (OOP)?",
    "answer": "The four main principles of OOP are:\n1. **Encapsulation**: Bundling data and methods that operate on that data into a single unit, hiding the internal state from the outside.\n2. **Inheritance**: The mechanism of a new class (subclass) inheriting the properties and methods of an existing class (superclass).\n3. **Polymorphism**: The ability of a single interface (method) to be used with different underlying forms (objects).\n4. **Abstraction**: Hiding complex implementation details and showing only the essential features of an object. This is often achieved through abstract classes and interfaces.",
    "sources": [
      {
        "name": "IBM: Object-Oriented Programming",
        "source": "https://www.ibm.com/topics/object-oriented-programming"
      },
      {
        "name": "GeeksforGeeks: OOPs Concepts in Java",
        "source": "https://www.geeksforgeeks.org/object-oriented-programming-oops-concepts-in-java/"
      }
    ],
    "additional_topics": [
      {
        "topic": "Abstract Classes and Interfaces",
        "source": "https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html"
      },
      {
        "topic": "Design Patterns",
        "source": "https://en.wikipedia.org/wiki/Software_design_pattern"
      }
    ]
  },
  {
    "question": "What is Abstraction in OOP?",
    "answer": "Abstraction is the principle of hiding the complex, underlying implementation details of an object and exposing only the essential features to the user. It allows you to create complex systems by focusing on the 'what' an object does rather than the 'how' it does it. A great analogy is a car's accelerator pedal: you press it to make the car go faster without needing to know the intricate mechanical processes happening under the hood.",
    "sources": [
      {
        "name": "GeeksforGeeks: Abstraction in Java",
        "source": "https://www.geeksforgeeks.org/abstraction-in-java/"
      },
      {
        "name": "TutorialsPoint: C++ - Abstraction",
        "source": "https://www.tutorialspoint.com/cplusplus/cpp_data_abstraction.htm"
      }
    ],
    "additional_topics": [
      {
        "topic": "Encapsulation vs. Abstraction",
        "source": "https://www.sumologic.com/glossary/encapsulation"
      },
      {
        "topic": "Abstract Classes and Interfaces",
        "source": "https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html"
      },
      {
        "topic": "Design Patterns",
        "source": "https://en.wikipedia.org/wiki/Software_design_pattern"
      }
    ]
  }
]